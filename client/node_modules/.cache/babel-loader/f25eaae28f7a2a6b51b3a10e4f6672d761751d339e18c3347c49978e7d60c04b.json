{"ast":null,"code":"/*\nReact-Quill\nhttps://github.com/zenoamaro/react-quill\n*/\nimport React, { createRef } from 'react';\nimport isEqual from 'lodash/isEqual.js';\nimport Quill from 'quill';\nexport { Quill };\nclass ReactQuill extends React.Component {\n  constructor(props) {\n    super(props);\n    this.editingAreaRef = createRef();\n    /*\n    Changing one of these props should cause a full re-render and a\n    re-instantiation of the Quill editor.\n    */\n    this.dirtyProps = ['modules', 'formats', 'bounds', 'theme', 'children'];\n    /*\n    Changing one of these props should cause a regular update. These are mostly\n    props that act on the container, rather than the quillized editing area.\n    */\n    this.cleanProps = ['id', 'className', 'style', 'placeholder', 'tabIndex', 'onChange', 'onChangeSelection', 'onFocus', 'onBlur', 'onKeyPress', 'onKeyDown', 'onKeyUp'];\n    this.state = {\n      generation: 0\n    };\n    /*\n    Tracks the internal selection of the Quill editor\n    */\n    this.selection = null;\n    this.onEditorChange = (eventName, rangeOrDelta, oldRangeOrDelta, source) => {\n      if (eventName === 'text-change') {\n        this.onEditorChangeText?.(this.editor.root.innerHTML, rangeOrDelta, source, this.unprivilegedEditor);\n      } else if (eventName === 'selection-change') {\n        this.onEditorChangeSelection?.(rangeOrDelta, source, this.unprivilegedEditor);\n      }\n    };\n    const value = this.isControlled() ? props.value : props.defaultValue;\n    this.value = value ?? '';\n  }\n  validateProps(props) {\n    if (React.Children.count(props.children) > 1) throw new Error('The Quill editing area can only be composed of a single React element.');\n    if (React.Children.count(props.children)) {\n      const child = React.Children.only(props.children);\n      if (child?.type === 'textarea') throw new Error('Quill does not support editing on a <textarea>. Use a <div> instead.');\n    }\n    if (this.lastDeltaChangeSet && props.value === this.lastDeltaChangeSet) throw new Error('You are passing the `delta` object from the `onChange` event back ' + 'as `value`. You most probably want `editor.getContents()` instead. ' + 'See: https://github.com/zenoamaro/react-quill#using-deltas');\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    this.validateProps(nextProps);\n    // If the editor hasn't been instantiated yet, or the component has been\n    // regenerated, we already know we should update.\n    if (!this.editor || this.state.generation !== nextState.generation) {\n      return true;\n    }\n    // Handle value changes in-place\n    if ('value' in nextProps) {\n      const prevContents = this.getEditorContents();\n      const nextContents = nextProps.value ?? '';\n      // NOTE: Seeing that Quill is missing a way to prevent edits, we have to\n      //       settle for a hybrid between controlled and uncontrolled mode. We\n      //       can't prevent the change, but we'll still override content\n      //       whenever `value` differs from current state.\n      // NOTE: Comparing an HTML string and a Quill Delta will always trigger a\n      //       change, regardless of whether they represent the same document.\n      if (!this.isEqualValue(nextContents, prevContents)) {\n        this.setEditorContents(this.editor, nextContents);\n      }\n    }\n    // Handle read-only changes in-place\n    if (nextProps.readOnly !== this.props.readOnly) {\n      this.setEditorReadOnly(this.editor, nextProps.readOnly);\n    }\n    // Clean and Dirty props require a render\n    return [...this.cleanProps, ...this.dirtyProps].some(prop => {\n      return !isEqual(nextProps[prop], this.props[prop]);\n    });\n  }\n  shouldComponentRegenerate(nextProps) {\n    // Whenever a `dirtyProp` changes, the editor needs reinstantiation.\n    return this.dirtyProps.some(prop => {\n      return !isEqual(nextProps[prop], this.props[prop]);\n    });\n  }\n  componentDidMount() {\n    this.instantiateEditor();\n    this.setEditorContents(this.editor, this.getEditorContents());\n  }\n  componentWillUnmount() {\n    this.destroyEditor();\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // If we're changing one of the `dirtyProps`, the entire Quill Editor needs\n    // to be re-instantiated. Regenerating the editor will cause the whole tree,\n    // including the container, to be cleaned up and re-rendered from scratch.\n    // Store the contents so they can be restored later.\n    if (this.editor && this.shouldComponentRegenerate(prevProps)) {\n      const delta = this.editor.getContents();\n      const selection = this.editor.getSelection();\n      this.regenerationSnapshot = {\n        delta,\n        selection\n      };\n      this.setState({\n        generation: this.state.generation + 1\n      });\n      this.destroyEditor();\n    }\n    // The component has been regenerated, so it must be re-instantiated, and\n    // its content must be restored to the previous values from the snapshot.\n    if (this.state.generation !== prevState.generation) {\n      const {\n        delta,\n        selection\n      } = this.regenerationSnapshot;\n      delete this.regenerationSnapshot;\n      this.instantiateEditor();\n      const editor = this.editor;\n      editor.setContents(delta);\n      postpone(() => this.setEditorSelection(editor, selection));\n    }\n  }\n  instantiateEditor() {\n    if (this.editor) {\n      this.hookEditor(this.editor);\n    } else {\n      this.editor = this.createEditor(this.getEditingArea(), this.getEditorConfig());\n    }\n  }\n  destroyEditor() {\n    if (!this.editor) return;\n    this.unhookEditor(this.editor);\n  }\n  /*\n  We consider the component to be controlled if `value` is being sent in props.\n  */\n  isControlled() {\n    return 'value' in this.props;\n  }\n  getEditorConfig() {\n    return {\n      bounds: this.props.bounds,\n      formats: this.props.formats,\n      modules: this.props.modules,\n      placeholder: this.props.placeholder,\n      readOnly: this.props.readOnly,\n      tabIndex: this.props.tabIndex,\n      theme: this.props.theme\n    };\n  }\n  getEditor() {\n    if (!this.editor) throw new Error('Accessing non-instantiated editor');\n    return this.editor;\n  }\n  /**\n  Creates an editor on the given element. The editor will be passed the\n  configuration, have its events bound,\n  */\n  createEditor(element, config) {\n    const editor = new Quill(element, config);\n    if (config.tabIndex != null) {\n      this.setEditorTabIndex(editor, config.tabIndex);\n    }\n    this.hookEditor(editor);\n    return editor;\n  }\n  hookEditor(editor) {\n    // Expose the editor on change events via a weaker, unprivileged proxy\n    // object that does not allow accidentally modifying editor state.\n    this.unprivilegedEditor = this.makeUnprivilegedEditor(editor);\n    // Using `editor-change` allows picking up silent updates, like selection\n    // changes on typing.\n    editor.on('editor-change', this.onEditorChange);\n  }\n  unhookEditor(editor) {\n    editor.off('editor-change', this.onEditorChange);\n  }\n  getEditorContents() {\n    return this.value;\n  }\n  getEditorSelection() {\n    return this.selection;\n  }\n  /*\n  True if the value is a Delta instance or a Delta look-alike.\n  */\n  isDelta(value) {\n    return value && value.ops;\n  }\n  /*\n  Special comparison function that knows how to compare Deltas.\n  */\n  isEqualValue(value, nextValue) {\n    if (this.isDelta(value) && this.isDelta(nextValue)) {\n      return isEqual(value.ops, nextValue.ops);\n    } else {\n      return isEqual(value, nextValue);\n    }\n  }\n  /*\n  Replace the contents of the editor, but keep the previous selection hanging\n  around so that the cursor won't move.\n  */\n  setEditorContents(editor, value) {\n    this.value = value;\n    const sel = this.getEditorSelection();\n    if (typeof value === 'string') {\n      editor.setContents(editor.clipboard.convert({\n        html: value\n      }));\n    } else {\n      editor.setContents(value);\n    }\n    postpone(() => this.setEditorSelection(editor, sel));\n  }\n  setEditorSelection(editor, range) {\n    this.selection = range;\n    if (range) {\n      // Validate bounds before applying.\n      const length = editor.getLength();\n      range.index = Math.max(0, Math.min(range.index, length - 1));\n      range.length = Math.max(0, Math.min(range.length, length - 1 - range.index));\n      editor.setSelection(range);\n    }\n  }\n  setEditorTabIndex(editor, tabIndex) {\n    if (editor?.scroll?.domNode) {\n      editor.scroll.domNode.tabIndex = tabIndex;\n    }\n  }\n  setEditorReadOnly(editor, value) {\n    if (value) {\n      editor.disable();\n    } else {\n      editor.enable();\n    }\n  }\n  /*\n  Returns a weaker, unprivileged proxy object that only exposes read-only\n  accessors found on the editor instance, without any state-modifying methods.\n  */\n  makeUnprivilegedEditor(editor) {\n    const e = editor;\n    return {\n      getHTML: () => e.root.innerHTML,\n      getSemanticHTML: e.getSemanticHTML.bind(e),\n      getLength: e.getLength.bind(e),\n      getText: e.getText.bind(e),\n      getContents: e.getContents.bind(e),\n      getSelection: e.getSelection.bind(e),\n      getBounds: e.getBounds.bind(e)\n    };\n  }\n  getEditingArea() {\n    const element = this.editingAreaRef.current;\n    if (!element) {\n      throw new Error('Cannot find element for editing area');\n    }\n    if (element.nodeType === 3) {\n      throw new Error('Editing area cannot be a text node');\n    }\n    return element;\n  }\n  /*\n  Renders an editor area, unless it has been provided one to clone.\n  */\n  renderEditingArea() {\n    const {\n      children,\n      preserveWhitespace\n    } = this.props;\n    const {\n      generation\n    } = this.state;\n    const properties = {\n      key: generation,\n      ref: this.editingAreaRef\n    };\n    if (React.Children.count(children)) {\n      return React.cloneElement(React.Children.only(children), properties);\n    }\n    return preserveWhitespace ? React.createElement(\"pre\", {\n      ...properties\n    }) : React.createElement(\"div\", {\n      ...properties\n    });\n  }\n  render() {\n    return React.createElement(\"div\", {\n      id: this.props.id,\n      style: this.props.style,\n      key: this.state.generation,\n      className: `quill ${this.props.className ?? ''}`,\n      onKeyPress: this.props.onKeyPress,\n      onKeyDown: this.props.onKeyDown,\n      onKeyUp: this.props.onKeyUp\n    }, this.renderEditingArea());\n  }\n  onEditorChangeText(value, delta, source, editor) {\n    if (!this.editor) return;\n    // We keep storing the same type of value as what the user gives us,\n    // so that value comparisons will be more stable and predictable.\n    const nextContents = this.isDelta(this.value) ? editor.getContents() : editor.getHTML();\n    if (nextContents !== this.getEditorContents()) {\n      // Taint this `delta` object, so we can recognize whether the user\n      // is trying to send it back as `value`, preventing a likely loop.\n      this.lastDeltaChangeSet = delta;\n      this.value = nextContents;\n      this.props.onChange?.(value, delta, source, editor);\n    }\n  }\n  onEditorChangeSelection(nextSelection, source, editor) {\n    if (!this.editor) return;\n    const currentSelection = this.getEditorSelection();\n    const hasGainedFocus = !currentSelection && nextSelection;\n    const hasLostFocus = currentSelection && !nextSelection;\n    if (isEqual(nextSelection, currentSelection)) return;\n    this.selection = nextSelection;\n    this.props.onChangeSelection?.(nextSelection, source, editor);\n    if (hasGainedFocus) {\n      this.props.onFocus?.(nextSelection, source, editor);\n    } else if (hasLostFocus) {\n      this.props.onBlur?.(currentSelection, source, editor);\n    }\n  }\n  focus() {\n    if (!this.editor) return;\n    this.editor.focus();\n  }\n  blur() {\n    if (!this.editor) return;\n    this.selection = null;\n    this.editor.blur();\n  }\n}\nReactQuill.displayName = 'React Quill';\n/*\nExport Quill to be able to call `register`\n*/\nReactQuill.Quill = Quill;\nReactQuill.defaultProps = {\n  theme: 'snow',\n  modules: {},\n  readOnly: false\n};\n/*\nSmall helper to execute a function in the next micro-tick.\n*/\nfunction postpone(fn) {\n  Promise.resolve().then(fn);\n}\nexport default ReactQuill;","map":{"version":3,"names":["React","createRef","isEqual","Quill","ReactQuill","Component","constructor","props","editingAreaRef","dirtyProps","cleanProps","state","generation","selection","onEditorChange","eventName","rangeOrDelta","oldRangeOrDelta","source","onEditorChangeText","editor","root","innerHTML","unprivilegedEditor","onEditorChangeSelection","value","isControlled","defaultValue","validateProps","Children","count","children","Error","child","only","type","lastDeltaChangeSet","shouldComponentUpdate","nextProps","nextState","prevContents","getEditorContents","nextContents","isEqualValue","setEditorContents","readOnly","setEditorReadOnly","some","prop","shouldComponentRegenerate","componentDidMount","instantiateEditor","componentWillUnmount","destroyEditor","componentDidUpdate","prevProps","prevState","delta","getContents","getSelection","regenerationSnapshot","setState","setContents","postpone","setEditorSelection","hookEditor","createEditor","getEditingArea","getEditorConfig","unhookEditor","bounds","formats","modules","placeholder","tabIndex","theme","getEditor","element","config","setEditorTabIndex","makeUnprivilegedEditor","on","off","getEditorSelection","isDelta","ops","nextValue","sel","clipboard","convert","html","range","length","getLength","index","Math","max","min","setSelection","scroll","domNode","disable","enable","e","getHTML","getSemanticHTML","bind","getText","getBounds","current","nodeType","renderEditingArea","preserveWhitespace","properties","key","ref","cloneElement","createElement","render","id","style","className","onKeyPress","onKeyDown","onKeyUp","onChange","nextSelection","currentSelection","hasGainedFocus","hasLostFocus","onChangeSelection","onFocus","onBlur","focus","blur","displayName","defaultProps","fn","Promise","resolve","then"],"sources":["C:\\Users\\SHIVA CHAITANYA\\Desktop\\New Builds\\BlogProject\\client\\node_modules\\react-quill-new\\src\\index.tsx"],"sourcesContent":["/*\nReact-Quill\nhttps://github.com/zenoamaro/react-quill\n*/\n\nimport React, { createRef } from 'react';\nimport isEqual from 'lodash/isEqual.js';\n\nimport Quill, { type EmitterSource, type Range as RangeStatic, QuillOptions as QuillOptionsStatic } from 'quill';\nimport type DeltaStatic from 'quill-delta';\n\nexport { Quill }\nexport type { DeltaStatic, EmitterSource, RangeStatic, QuillOptionsStatic }\n\n// Merged namespace hack to export types along with default object\n// See: https://github.com/Microsoft/TypeScript/issues/2719\nnamespace ReactQuill {\n  export type Value = string | DeltaStatic;\n  export type Range = RangeStatic | null;\n\n  export interface QuillOptions extends QuillOptionsStatic {\n    tabIndex?: number,\n  }\n\n  export interface ReactQuillProps {\n    bounds?: string | HTMLElement,\n    children?: React.ReactElement<any>,\n    className?: string,\n    defaultValue?: Value,\n    formats?: string[],\n    id?: string,\n    modules?: QuillOptions['modules'],\n    onChange?(\n      value: string,\n      delta: DeltaStatic,\n      source: EmitterSource,\n      editor: UnprivilegedEditor,\n    ): void,\n    onChangeSelection?(\n      selection: Range,\n      source: EmitterSource,\n      editor: UnprivilegedEditor,\n    ): void,\n    onFocus?(\n      selection: Range,\n      source: EmitterSource,\n      editor: UnprivilegedEditor,\n    ): void,\n    onBlur?(\n      previousSelection: Range,\n      source: EmitterSource,\n      editor: UnprivilegedEditor,\n    ): void,\n    onKeyDown?: React.EventHandler<any>,\n    onKeyPress?: React.EventHandler<any>,\n    onKeyUp?: React.EventHandler<any>,\n    placeholder?: string,\n    preserveWhitespace?: boolean,\n    readOnly?: boolean,\n    style?: React.CSSProperties,\n    tabIndex?: number,\n    theme?: string,\n    value?: Value,\n  }\n\n  export interface UnprivilegedEditor {\n    getLength: Quill['getLength'];\n    getText: Quill['getText'];\n    getHTML: () => string;\n    getSemanticHTML: Quill['getSemanticHTML'];\n    getBounds: Quill['getBounds'];\n    getSelection: Quill['getSelection'];\n    getContents: Quill['getContents'];\n  }\n}\n\n// Re-import everything from namespace into scope for comfort\nimport Value = ReactQuill.Value;\nimport Range = ReactQuill.Range;\nimport QuillOptions = ReactQuill.QuillOptions;\nimport ReactQuillProps = ReactQuill.ReactQuillProps;\nimport UnprivilegedEditor = ReactQuill.UnprivilegedEditor;\n\ninterface ReactQuillState {\n  generation: number,\n}\n\nclass ReactQuill extends React.Component<ReactQuillProps, ReactQuillState> {\n  editingAreaRef = createRef<any>();\n\n  static displayName = 'React Quill'\n\n  /*\n  Export Quill to be able to call `register`\n  */\n  static Quill = Quill;\n\n  /*\n  Changing one of these props should cause a full re-render and a\n  re-instantiation of the Quill editor.\n  */\n  dirtyProps: (keyof ReactQuillProps)[] = [\n    'modules',\n    'formats',\n    'bounds',\n    'theme',\n    'children',\n  ]\n\n  /*\n  Changing one of these props should cause a regular update. These are mostly\n  props that act on the container, rather than the quillized editing area.\n  */\n  cleanProps: (keyof ReactQuillProps)[] = [\n    'id',\n    'className',\n    'style',\n    'placeholder',\n    'tabIndex',\n    'onChange',\n    'onChangeSelection',\n    'onFocus',\n    'onBlur',\n    'onKeyPress',\n    'onKeyDown',\n    'onKeyUp',\n  ]\n\n  static defaultProps = {\n    theme: 'snow',\n    modules: {},\n    readOnly: false,\n  }\n\n  state: ReactQuillState = {\n    generation: 0,\n  }\n\n  /*\n  The Quill Editor instance.\n  */\n  editor?: Quill\n\n  /*\n  Tracks the internal value of the Quill editor\n  */\n  value: Value\n\n  /*\n  Tracks the internal selection of the Quill editor\n  */\n  selection: Range = null\n\n  /*\n  Used to compare whether deltas from `onChange` are being used as `value`.\n  */\n  lastDeltaChangeSet?: DeltaStatic\n\n  /*\n  Stores the contents of the editor to be restored after regeneration.\n  */\n  regenerationSnapshot?: {\n    delta: DeltaStatic,\n    selection: Range,\n  }\n\n  /*\n  A weaker, unprivileged proxy for the editor that does not allow accidentally\n  modifying editor state.\n  */\n  unprivilegedEditor?: UnprivilegedEditor\n\n  constructor(props: ReactQuillProps) {\n    super(props);\n    const value = this.isControlled()? props.value : props.defaultValue;\n    this.value = value ?? '';\n  }\n\n  validateProps(props: ReactQuillProps): void {\n    if (React.Children.count(props.children) > 1) throw new Error(\n      'The Quill editing area can only be composed of a single React element.'\n    );\n\n    if (React.Children.count(props.children)) {\n      const child = React.Children.only(props.children);\n      if (child?.type === 'textarea') throw new Error(\n        'Quill does not support editing on a <textarea>. Use a <div> instead.'\n      );\n    }\n\n    if (\n      this.lastDeltaChangeSet &&\n      props.value === this.lastDeltaChangeSet\n    ) throw new Error(\n      'You are passing the `delta` object from the `onChange` event back ' +\n      'as `value`. You most probably want `editor.getContents()` instead. ' +\n      'See: https://github.com/zenoamaro/react-quill#using-deltas'\n    );\n  }\n\n  shouldComponentUpdate(nextProps: ReactQuillProps, nextState: ReactQuillState) {\n    this.validateProps(nextProps);\n\n    // If the editor hasn't been instantiated yet, or the component has been\n    // regenerated, we already know we should update.\n    if (!this.editor || this.state.generation !== nextState.generation) {\n      return true;\n    }\n\n    // Handle value changes in-place\n    if ('value' in nextProps) {\n      const prevContents = this.getEditorContents();\n      const nextContents = nextProps.value ?? '';\n\n      // NOTE: Seeing that Quill is missing a way to prevent edits, we have to\n      //       settle for a hybrid between controlled and uncontrolled mode. We\n      //       can't prevent the change, but we'll still override content\n      //       whenever `value` differs from current state.\n      // NOTE: Comparing an HTML string and a Quill Delta will always trigger a\n      //       change, regardless of whether they represent the same document.\n      if (!this.isEqualValue(nextContents, prevContents)) {\n        this.setEditorContents(this.editor, nextContents);\n      }\n    }\n\n    // Handle read-only changes in-place\n    if (nextProps.readOnly !== this.props.readOnly) {\n      this.setEditorReadOnly(this.editor, nextProps.readOnly!);\n    }\n\n    // Clean and Dirty props require a render\n    return [...this.cleanProps, ...this.dirtyProps].some((prop) => {\n      return !isEqual(nextProps[prop], this.props[prop]);\n    });\n  }\n\n  shouldComponentRegenerate(nextProps: ReactQuillProps): boolean {\n    // Whenever a `dirtyProp` changes, the editor needs reinstantiation.\n    return this.dirtyProps.some((prop) => {\n      return !isEqual(nextProps[prop], this.props[prop]);\n    });\n  }\n\n  componentDidMount() {\n    this.instantiateEditor();\n    this.setEditorContents(this.editor!, this.getEditorContents());\n  }\n\n  componentWillUnmount() {\n    this.destroyEditor();\n  }\n\n  componentDidUpdate(prevProps: ReactQuillProps, prevState: ReactQuillState) {\n    // If we're changing one of the `dirtyProps`, the entire Quill Editor needs\n    // to be re-instantiated. Regenerating the editor will cause the whole tree,\n    // including the container, to be cleaned up and re-rendered from scratch.\n    // Store the contents so they can be restored later.\n    if (this.editor && this.shouldComponentRegenerate(prevProps)) {\n      const delta = this.editor.getContents();\n      const selection = this.editor.getSelection();\n      this.regenerationSnapshot = {delta, selection};\n      this.setState({generation: this.state.generation + 1});\n      this.destroyEditor();\n    }\n\n    // The component has been regenerated, so it must be re-instantiated, and\n    // its content must be restored to the previous values from the snapshot.\n    if (this.state.generation !== prevState.generation) {\n      const {delta, selection} = this.regenerationSnapshot!;\n      delete this.regenerationSnapshot;\n      this.instantiateEditor();\n      const editor = this.editor!;\n      editor.setContents(delta);\n      postpone(() => this.setEditorSelection(editor, selection));\n    }\n  }\n\n  instantiateEditor(): void {\n    if (this.editor) {\n      this.hookEditor(this.editor);\n    } else {\n      this.editor = this.createEditor(\n        this.getEditingArea(),\n        this.getEditorConfig()\n      );\n    }\n  }\n\n  destroyEditor(): void {\n    if (!this.editor) return;\n    this.unhookEditor(this.editor);\n  }\n\n  /*\n  We consider the component to be controlled if `value` is being sent in props.\n  */\n  isControlled(): boolean {\n    return 'value' in this.props;\n  }\n\n  getEditorConfig(): QuillOptions {\n    return {\n      bounds: this.props.bounds,\n      formats: this.props.formats,\n      modules: this.props.modules,\n      placeholder: this.props.placeholder,\n      readOnly: this.props.readOnly,\n      tabIndex: this.props.tabIndex,\n      theme: this.props.theme,\n    };\n  }\n\n  getEditor(): Quill {\n    if (!this.editor) throw new Error('Accessing non-instantiated editor');\n    return this.editor;\n  }\n\n  /**\n  Creates an editor on the given element. The editor will be passed the\n  configuration, have its events bound,\n  */\n  createEditor(element: HTMLElement, config: QuillOptions) {\n    const editor = new Quill(element, config);\n    if (config.tabIndex != null) {\n      this.setEditorTabIndex(editor, config.tabIndex);\n    }\n    this.hookEditor(editor);\n    return editor;\n  }\n\n  hookEditor(editor: Quill) {\n    // Expose the editor on change events via a weaker, unprivileged proxy\n    // object that does not allow accidentally modifying editor state.\n    this.unprivilegedEditor = this.makeUnprivilegedEditor(editor);\n    // Using `editor-change` allows picking up silent updates, like selection\n    // changes on typing.\n    editor.on('editor-change', this.onEditorChange);\n  }\n\n  unhookEditor(editor: Quill) {\n    editor.off('editor-change', this.onEditorChange);\n  }\n\n  getEditorContents(): Value {\n    return this.value;\n  }\n\n  getEditorSelection(): Range {\n    return this.selection;\n  }\n\n  /*\n  True if the value is a Delta instance or a Delta look-alike.\n  */\n  isDelta(value: any): boolean {\n    return value && value.ops;\n  }\n\n  /*\n  Special comparison function that knows how to compare Deltas.\n  */\n  isEqualValue(value: any, nextValue: any): boolean {\n    if (this.isDelta(value) && this.isDelta(nextValue)) {\n      return isEqual(value.ops, nextValue.ops);\n    } else {\n      return isEqual(value, nextValue);\n    }\n  }\n\n  /*\n  Replace the contents of the editor, but keep the previous selection hanging\n  around so that the cursor won't move.\n  */\n  setEditorContents(editor: Quill, value: Value) {\n    this.value = value;\n    const sel = this.getEditorSelection();\n    if (typeof value === 'string') {\n      editor.setContents(editor.clipboard.convert({html: value}));\n    } else {\n      editor.setContents(value);\n    }\n    postpone(() => this.setEditorSelection(editor, sel));\n  }\n\n  setEditorSelection(editor: Quill, range: Range) {\n    this.selection = range;\n    if (range) {\n      // Validate bounds before applying.\n      const length = editor.getLength();\n      range.index = Math.max(0, Math.min(range.index, length-1));\n      range.length = Math.max(0, Math.min(range.length, (length-1) - range.index));\n      editor.setSelection(range);\n    }\n  }\n\n  setEditorTabIndex(editor: Quill, tabIndex: number) {\n    if (editor?.scroll?.domNode) {\n      (editor.scroll.domNode as HTMLElement).tabIndex = tabIndex;\n    }\n  }\n\n  setEditorReadOnly(editor: Quill, value: boolean) {\n    if (value) {\n      editor.disable();\n    } else {\n      editor.enable();\n    }\n  }\n\n  /*\n  Returns a weaker, unprivileged proxy object that only exposes read-only\n  accessors found on the editor instance, without any state-modifying methods.\n  */\n  makeUnprivilegedEditor(editor: Quill) {\n    const e = editor;\n    return {\n      getHTML:         () => e.root.innerHTML,\n      getSemanticHTML: e.getSemanticHTML.bind(e),\n      getLength:       e.getLength.bind(e),\n      getText:         e.getText.bind(e),\n      getContents:     e.getContents.bind(e),\n      getSelection:    e.getSelection.bind(e),\n      getBounds:       e.getBounds.bind(e),\n    };\n  }\n\n  getEditingArea(): HTMLElement {\n    const element = this.editingAreaRef.current;\n    if (!element) {\n      throw new Error('Cannot find element for editing area');\n    }\n    if (element.nodeType === 3) {\n      throw new Error('Editing area cannot be a text node');\n    }\n    return element as HTMLElement;\n  }\n\n  /*\n  Renders an editor area, unless it has been provided one to clone.\n  */\n  renderEditingArea(): JSX.Element {\n    const {children, preserveWhitespace} = this.props;\n    const {generation} = this.state;\n\n    const properties = {\n      key: generation,\n      ref: this.editingAreaRef,\n    };\n\n    if (React.Children.count(children)) {\n      return React.cloneElement(\n        React.Children.only(children)!,\n        properties\n      );\n    }\n\n    return preserveWhitespace ?\n      <pre {...properties}/> :\n      <div {...properties}/>;\n  }\n\n  render() {\n    return (\n      <div\n        id={this.props.id}\n        style={this.props.style}\n        key={this.state.generation}\n        className={`quill ${this.props.className ?? ''}`}\n        onKeyPress={this.props.onKeyPress}\n        onKeyDown={this.props.onKeyDown}\n        onKeyUp={this.props.onKeyUp}\n      >\n        {this.renderEditingArea()}\n      </div>\n    );\n  }\n\n  onEditorChange = (\n    eventName: 'text-change' | 'selection-change',\n    rangeOrDelta: Range | DeltaStatic,\n    oldRangeOrDelta: Range | DeltaStatic,\n    source: EmitterSource,\n  ) => {\n    if (eventName === 'text-change') {\n      this.onEditorChangeText?.(\n        this.editor!.root.innerHTML,\n        rangeOrDelta as DeltaStatic,\n        source,\n        this.unprivilegedEditor!\n      );\n    } else if (eventName === 'selection-change') {\n      this.onEditorChangeSelection?.(\n        rangeOrDelta as RangeStatic,\n        source,\n        this.unprivilegedEditor!\n      );\n    }\n  };\n\n  onEditorChangeText(\n    value: string,\n    delta: DeltaStatic,\n    source: EmitterSource,\n    editor: UnprivilegedEditor,\n  ): void {\n    if (!this.editor) return;\n\n    // We keep storing the same type of value as what the user gives us,\n    // so that value comparisons will be more stable and predictable.\n    const nextContents = this.isDelta(this.value)\n      ? editor.getContents()\n      : editor.getHTML();\n\n    if (nextContents !== this.getEditorContents()) {\n      // Taint this `delta` object, so we can recognize whether the user\n      // is trying to send it back as `value`, preventing a likely loop.\n      this.lastDeltaChangeSet = delta;\n\n      this.value = nextContents;\n      this.props.onChange?.(value, delta, source, editor);\n    }\n  }\n\n  onEditorChangeSelection(\n    nextSelection: RangeStatic,\n    source: EmitterSource,\n    editor: UnprivilegedEditor,\n  ): void {\n    if (!this.editor) return;\n    const currentSelection = this.getEditorSelection();\n    const hasGainedFocus = !currentSelection && nextSelection;\n    const hasLostFocus = currentSelection && !nextSelection;\n\n    if (isEqual(nextSelection, currentSelection)) return;\n\n    this.selection = nextSelection;\n    this.props.onChangeSelection?.(nextSelection, source, editor);\n\n    if (hasGainedFocus) {\n      this.props.onFocus?.(nextSelection, source, editor);\n    } else if (hasLostFocus) {\n      this.props.onBlur?.(currentSelection, source, editor);\n    }\n  }\n\n  focus(): void {\n    if (!this.editor) return;\n    this.editor.focus();\n  }\n\n  blur(): void {\n    if (!this.editor) return;\n    this.selection = null;\n    this.editor.blur();\n  }\n}\n\n/*\nSmall helper to execute a function in the next micro-tick.\n*/\nfunction postpone(fn: (value: void) => void) {\n  Promise.resolve().then(fn);\n}\n\nexport default ReactQuill;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}